version: 0.1.0-{build}
image: Visual Studio 2022
clone_depth: 50
environment:
  VULKAN_SDK: C:\VulkanSDK\1.3.216.0
cache:
  - VulkanSDK.exe
init:
- ps: |
      $machinePath = [Environment]::GetEnvironmentVariable('Path', 'MACHINE')
      $newMachineEnvironmentPath = $machinePath
      
      # install chocolatey
      $chocolateyPath = "$env:AllUsersProfile\chocolatey\bin"
      if(Get-Command "choco" -ErrorAction SilentlyContinue)
      {
        echo "Chocolatey is already installed. Skipping installation."
      }
      else
      {
        echo "Chocolatey net present. Installing chocolatey."
        Invoke-Expression ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))
        {
          echo "Adding $chocolateyPath to Path environment variable"
          $env:Path += ";$chocolateyPath"
          $newMachineEnvironmentPath += ";$chocolateyPath"
        }
        else
        {
          echo "$chocolateyPath already present in Path environment variable"
        }
      }
      
      # install cmake
      $cmakePath = "${env:ProgramFiles(x86)}\CMake\bin"
      if(Get-Command "cmake" -ErrorAction SilentlyContinue)
      {
        echo "Cmake is already installed. Skipping installation."
      }
      else
      {
        echo "Cmake not present. Installing cmake."
        choco install cmake.portable -y

        if (-not ($machinePath.ToLower().Contains($cmakePath.ToLower())))
        {
          echo "Adding $cmakePath to Path environment variable"
          $env:Path += ";$cmakePath"
          $newMachineEnvironmentPath = "$cmakePath;$newMachineEnvironmentPath"
        }
        else
        {
          echo "$cmakePath already present in Path environment variable"
        }
      }

      # install winflexbison3
      if(Get-Command "bison" -ErrorAction SilentlyContinue)
      {
        echo "bison is already installed. Skipping installation."
      }
      else
      {
        echo "bison not present. Installing bison."
        choco install winflexbison3 -y
      }

      # update machine environment path
      if ($newMachineEnvironmentPath -ne $machinePath)
      {
        [Environment]::SetEnvironmentVariable('Path', $newMachineEnvironmentPath, 'MACHINE')
      }

      # install vulkan SDK
      choco install vulkan-sdk -y
      refreshenv
build_script:
- cmd: >-
    call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"

    appveyor DownloadFile https://developer.download.nvidia.com/compute/cuda/12.0.0/local_installers/cuda_12.0.0_527.41_windows.exe -FileName cuda.exe

    cuda.exe -s nvcc_12.0 curand_dev_12.0 nvrtc_dev_12.0

    set PATH=%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.0\bin;%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v12.0\libnvvp;%PATH%

    scripts/build_imgui Release

    scripts/build_crossguid Release

    scripts/build_opengex Release

    scripts/build_zlib Release

    scripts/build_bullet Release

    scripts/build_glslangValidator Release

    scripts/build_spirvcross Release

    scripts/build_libispc-texcomp Release

    scripts/build_openal Release

    scripts/build Release

    scripts/cook_material Release

test_script:
- cmd: cmake --build build --config Release --target RUN_TESTS

after_test:
- cmd: cmake --build build --config Release --target package

artifacts:
- path: build\GEFS-0.1.0-win64.exe
  name: GEFS

deploy:
  description: 'prerelese'
  provider: GitHub
  auth_token:
    secure: pIYqTxy2j+k+mc5nQUf108hSt7eMW9s/FroCE3qhl7eSeO8b11x64kXhu6a2Tsbz # your encrypted token from GitHub
  artifact: build\GEFS-0.1.0-win64.exe # upload all NuGet packages to release assets
  draft: false
  prerelease: yes
  on:
    branch: master                 # release from master branch only
    APPVEYOR_REPO_TAG: true        # deploy on tag push only
